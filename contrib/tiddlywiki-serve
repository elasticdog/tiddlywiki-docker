#!/usr/bin/env bash

#
# tiddlywiki-serve -- https://github.com/elasticdog/tiddlywiki-docker
#
# Start a TiddlyWiki server (running in a Docker container)
# for an //existing// wiki on the host's filesystem.
#
# Copyright (c) 2018 Aaron Bull Schaefer <aaron@elasticdog.com>
# This source code is provided under the terms of the MIT License
# that can be be found in the top-level LICENSE file.
#

[[ -n $TIDDLYWIKI_DOCKER_DEBUG ]] && set -o xtrace

readonly TIDDLYWIKI_DOCKER_TAG=${TIDDLYWIKI_DOCKER_TAG:-latest}
readonly TIDDLYWIKI_DOCKER_PORT=${TIDDLYWIKI_DOCKER_PORT:-}

# print this script's usage message to stderr
usage() {
	cat <<-EOF >&2
		usage: tiddlywiki-serve [--help] [--stop] [<wikifolder>]
	EOF
}

# reset all variables that might be set
stop_container=''
wikifolder='.'  # default to the current working directory

# parse command line options
while [[ "$1" != '' ]]; do
	case $1 in
		-h | --help | -\?)
			usage
			exit 0
			;;
		-s | --stop)
			stop_container='true'
			;;
		*)
			wikifolder=${1#-}
			;;
	esac
	shift
done

if [[ ! -d $wikifolder ]]; then
	printf 'tiddlywiki-serve: <wikifolder> "%s" is not a directory\n' "$wikifolder" >&2
	usage
	exit 1
fi

# expand any relative paths so our container name will be useful
cd "$wikifolder" > /dev/null || exit 1
wikifolder_basename=$(basename -- "$PWD")

# replace any invalid characters with a hyphen
container_name="tw-${wikifolder_basename//[^a-zA-Z0-9_.-]/-}"

if [[ $stop_container == 'true' ]]; then
	printf 'stopping container "%s"\n' "$container_name"
	docker stop "$container_name" > /dev/null
	exit $?
fi

docker run --detach --rm \
	--name "$container_name" \
	--env-file <(env | grep ^TIDDLYWIKI_) \
	--publish "127.0.0.1:${TIDDLYWIKI_DOCKER_PORT}:8080" \
	--mount "type=bind,source=${PWD},target=/tiddlywiki" \
	--user "$(id -u):$(id -g)" \
	"elasticdog/tiddlywiki:${TIDDLYWIKI_DOCKER_TAG}" \
	--listen host=0.0.0.0 > /dev/null

exit_status=$?
if [[ $exit_status -ne 0 ]]; then
	printf 'tiddlywiki-serve: error starting container "%s"\n' "$container_name" >&2
	exit $exit_status
fi

port_mapping=$(docker port "$container_name" 8080)
printf 'container "%s" listening at %s\n' "$container_name" "http://${port_mapping/#127.0.0.1/localhost}"

exit 0
